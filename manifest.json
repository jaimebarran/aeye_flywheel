{
  "name": "aeye",
  "label": "AEye: Segmentation of eye tissues from T1w MR images",
  "description": "AEye performs inference from a trained model to new T1w MR images to segment the eye tissues (lens, vitreous, optic nerve, rectus muscles, and fat) using a U-Net architecture. The model was trained on a large dataset of T1w MR images from the Study of Health in Pomerania (SHIP).",
  "version": "0.0.0",
  "author": "Jaime Barranco",
  "maintainer": "Jaime Barranco <jaime.barranco-hernandez@chuv.ch>",
  "cite": "",
  "license": "Other",
  "url": "https://github.com/jaimebarran/aeye_flywheel",
  "source": "",
  "environment": {
    "FLYWHEEL": "/flywheel/v0",
    "NPP_VERSION": "12.2.3.2",
    "SHELL": "/bin/bash",
    "NVIDIA_VISIBLE_DEVICES": "all",
    "DALI_BUILD": "12152788",
    "CUSOLVER_VERSION": "11.5.4.101",
    "CUBLAS_VERSION": "12.3.4.1",
    "CUFFT_VERSION": "11.0.12.1",
    "NVIDIA_REQUIRE_CUDA": "cuda>=9.0",
    "CUDA_CACHE_DISABLE": "1",
    "TENSORBOARD_PORT": "6006",
    "TORCH_CUDA_ARCH_LIST": "5.2 6.0 6.1 7.0 7.2 7.5 8.0 8.6 8.7 9.0+PTX",
    "NCCL_VERSION": "2.19.stable.20231214+cuda12.3",
    "CUSPARSE_VERSION": "12.2.0.103",
    "ENV": "/etc/shinit_v2",
    "PWD": "/flywheel/v0",
    "OPENUCX_VERSION": "1.15.0",
    "NSIGHT_SYSTEMS_VERSION": "2023.4.1.97",
    "NVIDIA_DRIVER_CAPABILITIES": "compute,utility,video",
    "POLYGRAPHY_VERSION": "0.49.4",
    "UCC_CL_BASIC_TLS": "^sharp",
    "TRT_VERSION": "8.6.3.1+cuda12.2.2.009",
    "NVIDIA_PRODUCT_NAME": "PyTorch",
    "RDMACORE_VERSION": "39.0",
    "COCOAPI_VERSION": "2.0+nv0.8.0",
    "CUDA_VERSION": "12.3.2.001",
    "PYTORCH_VERSION": "2.3.0a0+ebedce2",
    "CURAND_VERSION": "10.3.4.107",
    "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION": "python",
    "PYTORCH_BUILD_NUMBER": "0",
    "USE_EXPERIMENTAL_CUDNN_V8_API": "1",
    "CUTENSOR_VERSION": "2.0.0.7",
    "PIP_DEFAULT_TIMEOUT": "100",
    "NVFUSER_BUILD_VERSION": "d0bb811",
    "HPCX_VERSION": "2.16rc4",
    "TORCH_CUDNN_V8_API_ENABLED": "1",
    "NVM_DIR": "/usr/local/nvm",
    "GDRCOPY_VERSION": "2.3",
    "NVFUSER_VERSION": "d0bb811",
    "OPENMPI_VERSION": "4.1.5rc2",
    "NVJPEG_VERSION": "12.3.0.81",
    "LIBRARY_PATH": "/usr/local/cuda/lib64/stubs:",
    "PYTHONIOENCODING": "utf-8",
    "SHLVL": "0",
    "BASH_ENV": "/etc/bash.bashrc",
    "CUDNN_VERSION": "9.0.0.306",
    "NSIGHT_COMPUTE_VERSION": "2023.3.1.1",
    "DALI_VERSION": "1.34.0",
    "JUPYTER_PORT": "8888",
    "PYTORCH_HOME": "/opt/pytorch/pytorch",
    "LD_LIBRARY_PATH": "/usr/local/lib/python3.10/dist-packages/torch/lib:/usr/local/lib/python3.10/dist-packages/torch_tensorrt/lib:/usr/local/cuda/compat/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64",
    "NVIDIA_BUILD_ID": "82611821",
    "OMPI_MCA_coll_hcoll_enable": "0",
    "OPAL_PREFIX": "/opt/hpcx/ompi",
    "CUDA_DRIVER_VERSION": "545.23.08",
    "LC_ALL": "C.UTF-8",
    "TRANSFORMER_ENGINE_VERSION": "1.3",
    "PYTORCH_BUILD_VERSION": "2.3.0a0+ebedce2",
    "_CUDA_COMPAT_PATH": "/usr/local/cuda/compat",
    "CUDA_HOME": "/usr/local/cuda",
    "CUDA_MODULE_LOADING": "LAZY",
    "PATH": "/usr/local/lib/python3.10/dist-packages/torch_tensorrt/bin:/usr/local/mpi/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ucx/bin:/opt/tensorrt/bin",
    "MOFED_VERSION": "5.4-rdmacore39.0",
    "NVIDIA_PYTORCH_VERSION": "24.02",
    "TRTOSS_VERSION": "23.11",
    "TORCH_ALLOW_TF32_CUBLAS_OVERRIDE": "1",
    "_": "/usr/bin/printenv",
    "nnUNet_raw_data_base": "/opt/nnunet_resources/nnUNet_raw_data_base",
    "nnUNet_preprocessed": "/opt/nnunet_resources/nnUNet_preprocessed",
    "RESULTS_FOLDER": "/opt/nnunet_resources/nnUNet_trained_models"
  },
  "custom": {
    "gear-builder": {
      "category": "analysis",
      "image": "jaimebarran/fw_gear_aeye:0.0.1"
    },
    "flywheel": {
      "suite": "Image Processing - Segmentation"
    }
  },
  "inputs": {
    "nifti": {
      "description": "MRI NIfTI file. Input must be a structural image (T1) NIfTI file.",
      "base": "file",
      "type": {
        "enum": [
          "nifti"
        ]
      }
    }
  },
  "config": {
    "measurement": {
      "default": "T1",
      "description": "Measurement/Intent of input image. Must be 'T1'(default='auto-detect' - gear will attempt to automatically detect the type of input image. If input does not have a classification value, making auto-detection impossible, the gear will exit with code=XX).",
      "type": "string",
      "enum": [
        "auto-detect",
        "T1"
      ]
    },
    "debug": {
      "type": "boolean",
      "default": true,
      "description": "Enable debug mode."
    }
  },
  "command": "python run.py"
}